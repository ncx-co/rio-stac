{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"rio-stac","text":"<p> Create STAC Items from raster datasets. </p> <p> </p> <p>Documentation: developmentseed.github.io/rio-stac/</p> <p>Source Code: developmentseed/rio-stac</p> <p><code>rio-stac</code> is a simple rasterio plugin for creating valid STAC items from a raster dataset. The library is built on top of pystac to make sure we follow the STAC specification.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install pip -U\n\n# From Pypi\n$ pip install rio-stac\n\n# Or from source\n$ pip install git+http://github.com/developmentseed/rio-stac\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>// rio stac tests/fixtures/dataset_cog.tif | jq\n{\n\"type\": \"Feature\",\n\"stac_version\": \"1.0.0\",\n\"id\": \"dataset_cog.tif\",\n\"properties\": {\n\"proj:epsg\": 32621,\n\"proj:geometry\": {\n\"type\": \"Polygon\",\n\"coordinates\": [\n[\n[\n373185,\n8019284.949381611\n],\n[\n639014.9492102272,\n8019284.949381611\n],\n[\n639014.9492102272,\n8286015\n],\n[\n373185,\n8286015\n],\n[\n373185,\n8019284.949381611\n]\n]\n]\n},\n\"proj:bbox\": [\n373185,\n8019284.949381611,\n639014.9492102272,\n8286015\n],\n\"proj:shape\": [\n2667,\n2658\n],\n\"proj:transform\": [\n100.01126757344893,\n0,\n373185,\n0,\n-100.01126757344893,\n8286015,\n0,\n0,\n1\n],\n\"datetime\": \"2022-09-02T16:17:51.427680Z\"\n},\n\"geometry\": {\n\"type\": \"Polygon\",\n\"coordinates\": [\n[\n[\n-60.72634617297825,\n72.23689137791739\n],\n[\n-52.91627525610924,\n72.22979795551834\n],\n[\n-52.301598718454485,\n74.61378388950398\n],\n[\n-61.28762442711404,\n74.62204314252978\n],\n[\n-60.72634617297825,\n72.23689137791739\n]\n]\n]\n},\n\"links\": [],\n\"assets\": {\n\"asset\": {\n\"href\": \"/Users/vincentsarago/Dev/DevSeed/rio-stac/tests/fixtures/dataset_cog.tif\",\n\"raster:bands\": [\n{\n\"data_type\": \"uint16\",\n\"scale\": 1,\n\"offset\": 0,\n\"sampling\": \"point\",\n\"statistics\": {\n\"mean\": 2107.524612053134,\n\"minimum\": 1,\n\"maximum\": 7872,\n\"stddev\": 2271.0065537857326,\n\"valid_percent\": 9.564764936336924e-05\n},\n\"histogram\": {\n\"count\": 11,\n\"min\": 1,\n\"max\": 7872,\n\"buckets\": [\n503460,\n0,\n0,\n161792,\n283094,\n0,\n0,\n0,\n87727,\n9431\n]\n}\n}\n],\n\"eo:bands\": [\n{\n\"name\": \"b1\",\n\"description\": \"gray\"\n}\n],\n\"roles\": []\n}\n},\n\"bbox\": [\n-61.28762442711404,\n72.22979795551834,\n-52.301598718454485,\n74.62204314252978\n],\n\"stac_extensions\": [\n\"https://stac-extensions.github.io/projection/v1.0.0/schema.json\",\n\"https://stac-extensions.github.io/raster/v1.1.0/schema.json\",\n\"https://stac-extensions.github.io/eo/v1.0.0/schema.json\"\n]\n}\n</code></pre> <p>See developmentseed.org/rio-stac/intro/ for more.</p>"},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#authors","title":"Authors","text":"<p>See contributors</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Issues and pull requests are more than welcome.</p> <p>dev install</p> <pre><code>$ git clone https://github.com/developmentseed/rio-stac.git\n$ cd rio-stac\n$ pip install -e .[\"test\",\"dev\"]\n</code></pre> <p>You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov rio_stac --cov-report term-missing\n</code></pre> <p>pre-commit</p> <p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>$ pre-commit install\n</code></pre> <p>Docs</p> <pre><code>$ git clone https://github.com/developmentseed/rio-stac.git\n$ cd rio-stac\n$ pip install -e .[\"doc\"]\n</code></pre> <p>Create API docs</p> <pre><code>$ pdocs as_markdown --output_dir docs/docs/api/ --exclude_source --overwrite rio_stac.stac\n</code></pre> <p>Hot-reloading docs:</p> <pre><code>$ mkdocs serve\n</code></pre> <p>To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.):</p> <pre><code>$ mkdocs gh-deploy -f docs/mkdocs.yml\n</code></pre>"},{"location":"intro/","title":"User Guide","text":"<p><code>rio-stac</code> can be used either from the command line as a rasterio plugin (<code>rio stac</code>) or from your own script.</p> <p>For more information about the <code>Item</code> specification, please see github.com/radiantearth/stac-spec/blob/master/item-spec/item-spec.md</p>"},{"location":"intro/#cli","title":"CLI","text":"<pre><code>$ rio stac --help\n\nUsage: rio stac [OPTIONS] INPUT\n\n  Rasterio STAC plugin: Create a STAC Item for raster dataset.\n\nOptions:\n  -d, --datetime TEXT               The date and time of the assets, in UTC (e.g 2020-01-01, 2020-01-01T01:01:01).\n-e, --extension TEXT                STAC extensions the Item implements (default is set to [\"proj\"]). Multiple allowed (e.g. `-e extensionUrl1 -e extensionUrl2`).\n  -c, --collection TEXT             The Collection ID that this item belongs to.\n  --collection-url TEXT             Link to the STAC Collection.\n  -p, --property NAME=VALUE         Additional property to add (e.g `-p myprops=1`). Multiple allowed.\n  --id TEXT                         Item id.\n  -n, --asset-name TEXT             Asset name.\n  --asset-href TEXT                 Overwrite asset href.\n  --asset-mediatype [COG|GEOJSON|GEOPACKAGE|GEOTIFF|HDF|HDF5|JPEG|JPEG2000|JSON|PNG|TEXT|TIFF|XML|auto] Asset media-type.\n  --with-proj / --without-proj      Add the 'projection' extension and properties (default to True).\n  --with-raster / --without-raster  Add the 'raster' extension and properties (default to True).\n  --with-eo / --without-eo          Add the 'eo' extension and properties (default to True).\n  --max-raster-size INTEGER         Limit array size from which to get the raster statistics (default to 1024).\n  --densify-geom INTEGER            Densifies the number of points on each edges of the polygon geometry to account for non-linear transformation.\n  --geom-precision INTEGER          Round geometry coordinates to this number of decimal.\n  -o, --output PATH                 Output file name\n  --config NAME=VALUE               GDAL configuration options.\n  --help                            Show this message and exit.\n</code></pre>"},{"location":"intro/#how-to","title":"How To","text":"<p>The CLI can be run as is, just by passing a <code>source</code> raster data. You can also use options to customize the output STAC item:</p> <ul> <li> <p>datetime (-d, --datetime)</p> <p>By design, all STAC items must have a datetime in their properties. By default the CLI will set the time to the actual UTC Time or use <code>ACQUISITIONDATETIME</code> defined in dataset metadata (see GDAL Raster data model). The CLI will accept any format supported by <code>dateparser</code>.</p> <p>You can also define <code>start_datetime</code> and <code>end_datetime</code> by using <code>--datetime {start}/{end}</code> notation.</p> <p>Note: <code>GDAL Raster data model</code> metadata are stored in an external file so you may want to set <code>GDAL_DISABLE_READDIR_ON_OPEN=FALSE</code> environment variable to allow GDAL to fetch the sidecar files.</p> </li> <li> <p>extension (-e, --extension)</p> <p>STAC Item can have extensions which indicates that the item has additional properies (e.g proj information). This option can be set multiple times.</p> <p>You can pass the extension option multiple times: <code>-e extension1 -e extension2</code>.</p> </li> <li> <p>projection extension (--with-proj / --without-proj)</p> <p>By default the <code>projection</code> extension and properties will be added to the item.</p> <p>link: stac-extensions/projection</p> <pre><code>{\n\"proj:epsg\": 3857,\n\"proj:geometry\": {\"type\": \"Polygon\", \"coordinates\": [...]},\n\"proj:bbox\": [...],\n\"proj:shape\": [8192, 8192],\n\"proj:transform\": [...],\n\"datetime\": \"2021-03-19T02:27:33.266356Z\"\n}\n</code></pre> <p>You can pass <code>--without-proj</code> to disable it.</p> </li> <li> <p>raster extension (--with-raster / --without-raster)</p> <p>By default the <code>raster</code> extension and properties will be added to the item.</p> <p>link: stac-extensions/raster</p> <pre><code>\"raster:bands\": [\n{\n\"sampling\": \"point\",\n\"data_type\": \"uint16\",\n\"scale\": 1,\n\"offset\": 0,\n\"statistics\": {\n\"mean\": 2107.524612053134,\n\"minimum\": 1,\n\"maximum\": 7872,\n\"stdev\": 2271.0065537857326,\n\"valid_percent\": 9.564764936336924e-05\n},\n\"histogram\": {\n\"count\": 11,\n\"min\": 1,\n\"max\": 7872,\n\"buckets\": [503460, 0, 0, 161792, 283094, 0, 0, 0, 87727, 9431]\n}\n}\n]\n</code></pre> <p>You can pass <code>--without-raster</code> to disable it.</p> </li> <li> <p>eo extension (--with-eo / --without-eo)</p> <p>By default the <code>eo</code> extension and properties will be added to the item. The <code>eo:cloud_cover</code> value will be fetched from GDAL Raster data model metadata.</p> <p>link: stac-extensions/eo</p> <p>Cloud Cover property <pre><code>\"eo:cloud_cover\": 2\n</code></pre></p> <p>Asset's bands <pre><code>\"eo:bands\": [\n{\n\"name\": \"b1\",\n\"description\": \"red\"\n},\n{\n\"name\": \"b2\"\n\"description\": \"green\"\n},\n{\n\"name\": \"b3\"\n\"description\": \"blue\"\n}\n],\n</code></pre></p> <p>You can pass <code>--without-eo</code> to disable it.</p> <p>Note: <code>GDAL Raster data model</code> metadata are stored in an external file so you may want to set <code>GDAL_DISABLE_READDIR_ON_OPEN=FALSE</code> environment variable to allow GDAL to fetch the sidecar files.</p> </li> <li> <p>collection (-c, --collection)</p> <p>Add a <code>collection</code> attribute to the item.</p> </li> <li> <p>collection link (--collection-url)</p> <p>When adding a collection to the Item, the specification state that a Link must also be set. By default the <code>href</code> will be set with the collection id. You can specify a custom URL using this option.</p> </li> <li> <p>properties (-p, --property)</p> <p>You can add multiple properties to the item using <code>-p {KEY}={VALUE}</code> notation. This option can be set multiple times.</p> </li> <li> <p>id (--id)</p> <p>STAC Item id to set. Default to the source basename.</p> </li> <li> <p>asset name (-n, --asset-name)</p> <p>Name to use in the assets section. Default to <code>asset</code>.</p> <pre><code>{\n\"asset\": {\n\"href\": \"raster.tif\"\n}\n}\n</code></pre> </li> <li> <p>asset href (--asset-href)</p> <p>Overwrite the HREF in the <code>asset</code> object. Default to the source path.</p> </li> <li> <p>media type (--asset-mediatype)</p> <p>Set the asset <code>mediatype</code>.</p> <p>If set to <code>auto</code>, <code>rio-stac</code> will try to find the mediatype.</p> </li> <li> <p>geometry density (--densify-geom)</p> <p>When creating the GeoJSON geometry from the input dataset we usually take the <code>bounding box</code> of the data and construct a simple Polygon which then get reprojected to EPSG:4326. Sadly the world is neither flat and square, so doing a transformation using bounding box can lead to non-ideal result. To get better results and account for nonlinear transformation you can add <code>points</code> on each edge of the polygon using <code>--densify-geom</code> option.</p> </li> </ul>"},{"location":"intro/#example","title":"Example","text":"<pre><code>// rio stac tests/fixtures/dataset_cog.tif | jq\n{\n\"type\": \"Feature\",\n\"stac_version\": \"1.0.0\",\n\"id\": \"dataset_cog.tif\",\n\"properties\": {\n\"proj:epsg\": 32621,\n\"proj:geometry\": {\n\"type\": \"Polygon\",\n\"coordinates\": [\n[\n[\n373185,\n8019284.949381611\n],\n[\n639014.9492102272,\n8019284.949381611\n],\n[\n639014.9492102272,\n8286015\n],\n[\n373185,\n8286015\n],\n[\n373185,\n8019284.949381611\n]\n]\n]\n},\n\"proj:bbox\": [\n373185,\n8019284.949381611,\n639014.9492102272,\n8286015\n],\n\"proj:shape\": [\n2667,\n2658\n],\n\"proj:transform\": [\n100.01126757344893,\n0,\n373185,\n0,\n-100.01126757344893,\n8286015,\n0,\n0,\n1\n],\n\"datetime\": \"2022-09-02T15:02:28.295654Z\"\n},\n\"geometry\": {\n\"type\": \"Polygon\",\n\"coordinates\": [\n[\n[\n-60.72634617297825,\n72.23689137791739\n],\n[\n-52.91627525610924,\n72.22979795551834\n],\n[\n-52.301598718454485,\n74.61378388950398\n],\n[\n-61.28762442711404,\n74.62204314252978\n],\n[\n-60.72634617297825,\n72.23689137791739\n]\n]\n]\n},\n\"links\": [],\n\"assets\": {\n\"asset\": {\n\"href\": \"dataset_cog.tif\",\n\"raster:bands\": [\n{\n\"data_type\": \"uint16\",\n\"scale\": 1,\n\"offset\": 0,\n\"sampling\": \"point\",\n\"statistics\": {\n\"mean\": 2107.524612053134,\n\"minimum\": 1,\n\"maximum\": 7872,\n\"stddev\": 2271.0065537857326,\n\"valid_percent\": 9.564764936336924e-05\n},\n\"histogram\": {\n\"count\": 11,\n\"min\": 1,\n\"max\": 7872,\n\"buckets\": [\n503460,\n0,\n0,\n161792,\n283094,\n0,\n0,\n0,\n87727,\n9431\n]\n}\n}\n],\n\"eo:bands\": [\n{\n\"name\": \"b1\",\n\"description\": \"gray\"\n}\n],\n\"roles\": []\n}\n},\n\"bbox\": [\n-61.28762442711404,\n72.22979795551834,\n-52.301598718454485,\n74.62204314252978\n],\n\"stac_extensions\": [\n\"https://stac-extensions.github.io/projection/v1.0.0/schema.json\",\n\"https://stac-extensions.github.io/raster/v1.1.0/schema.json\",\n\"https://stac-extensions.github.io/eo/v1.0.0/schema.json\"\n]\n}\n</code></pre> <pre><code>// rio stac S-2_20200422_COG.tif \\\n//   -d 2020-04-22 \\\n//   -c myprivatecollection \\\n//   -p comments:name=myfile \\\n//   --id COG \\\n//   -n mosaic \\\n//   --asset-href https://somewhere.overtherainbow.io/S-2_20200422_COG.tif \\\n//   --asset-mediatype COG | jq\n{\n\"type\": \"Feature\",\n\"stac_version\": \"1.0.0\",\n\"id\": \"COG\",\n\"properties\": {\n\"comments:name\": \"myfile\",\n\"proj:epsg\": 32632,\n\"proj:geometry\": {\n\"type\": \"Polygon\",\n\"coordinates\": [\n[\n[\n342765,\n5682885\n],\n[\n674215,\n5682885\n],\n[\n674215,\n5971585\n],\n[\n342765,\n5971585\n],\n[\n342765,\n5682885\n]\n]\n]\n},\n\"proj:bbox\": [\n342765,\n5682885,\n674215,\n5971585\n],\n\"proj:shape\": [\n28870,\n33145\n],\n\"proj:transform\": [\n10,\n0,\n342765,\n0,\n-10,\n5971585,\n0,\n0,\n1\n],\n\"datetime\": \"2020-04-22T00:00:00Z\"\n},\n\"geometry\": {\n\"type\": \"Polygon\",\n\"coordinates\": [\n[\n[\n6.745709371926977,\n51.27558086786243\n],\n[\n11.497498156319669,\n51.270642883468916\n],\n[\n11.64938680867944,\n53.86346627759\n],\n[\n6.608576517072109,\n53.868886713141336\n],\n[\n6.745709371926977,\n51.27558086786243\n]\n]\n]\n},\n\"links\": [\n{\n\"rel\": \"collection\",\n\"href\": \"myprivatecollection\",\n\"type\": \"application/json\"\n}\n],\n\"assets\": {\n\"mosaic\": {\n\"href\": \"https://somewhere.overtherainbow.io/S-2_20200422_COG.tif\",\n\"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\",\n\"raster:bands\": [\n{\n\"data_type\": \"uint8\",\n\"scale\": 1,\n\"offset\": 0,\n\"sampling\": \"area\",\n\"statistics\": {\n\"mean\": 70.14680057905686,\n\"minimum\": 0,\n\"maximum\": 255,\n\"stddev\": 36.47197403839734,\n\"valid_percent\": 49.83785997057175\n},\n\"histogram\": {\n\"count\": 11,\n\"min\": 0,\n\"max\": 255,\n\"buckets\": [\n21135,\n129816,\n152194,\n76363,\n39423,\n20046,\n10272,\n3285,\n1115,\n1574\n]\n}\n},\n{\n\"data_type\": \"uint8\",\n\"scale\": 1,\n\"offset\": 0,\n\"sampling\": \"area\",\n\"statistics\": {\n\"mean\": 70.72913714816694,\n\"minimum\": 0,\n\"maximum\": 255,\n\"stddev\": 34.031434334640124,\n\"valid_percent\": 49.83785997057175\n},\n\"histogram\": {\n\"count\": 11,\n\"min\": 0,\n\"max\": 255,\n\"buckets\": [\n14829,\n116732,\n171933,\n81023,\n38736,\n18977,\n8362,\n2259,\n918,\n1454\n]\n}\n},\n{\n\"data_type\": \"uint8\",\n\"scale\": 1,\n\"offset\": 0,\n\"sampling\": \"area\",\n\"statistics\": {\n\"mean\": 47.96346845392258,\n\"minimum\": 0,\n\"maximum\": 255,\n\"stddev\": 32.447819767110225,\n\"valid_percent\": 49.83785997057175\n},\n\"histogram\": {\n\"count\": 11,\n\"min\": 0,\n\"max\": 255,\n\"buckets\": [\n110478,\n177673,\n93767,\n41101,\n20804,\n7117,\n1939,\n856,\n829,\n659\n]\n}\n}\n],\n\"eo:bands\": [\n{\n\"name\": \"b1\",\n\"description\": \"red\"\n},\n{\n\"name\": \"b2\",\n\"description\": \"green\"\n},\n{\n\"name\": \"b3\",\n\"description\": \"blue\"\n}\n],\n\"roles\": []\n}\n},\n\"bbox\": [\n6.608576517072109,\n51.270642883468916,\n11.64938680867944,\n53.868886713141336\n],\n\"stac_extensions\": [\n\"https://stac-extensions.github.io/projection/v1.0.0/schema.json\",\n\"https://stac-extensions.github.io/raster/v1.1.0/schema.json\",\n\"https://stac-extensions.github.io/eo/v1.0.0/schema.json\"\n],\n\"collection\": \"myprivatecollection\"\n}\n</code></pre>"},{"location":"intro/#api","title":"API","text":"<p>see: api</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#070-2023-04-05","title":"0.7.0 (2023-04-05)","text":"<ul> <li>add <code>geom_densify_pts</code> option allow adding points on Polygon edges to account for non-linear transformation</li> <li>add <code>geom_precision</code> option to control the decimal precision of the output geometry</li> <li>rename <code>rio_stac.stac.get_metadata</code> to <code>rio_stac.stac.get_dataset_geom</code></li> </ul>"},{"location":"release-notes/#061-2022-10-26","title":"0.6.1 (2022-10-26)","text":"<ul> <li>add python 3.11 support</li> </ul>"},{"location":"release-notes/#060-2022-10-20","title":"0.6.0 (2022-10-20)","text":"<ul> <li>remove python 3.7 support (developmentseed/rio-stac!42)</li> <li>add <code>projjson</code> representation of the dataset CRS if available (author @clausmichele, developmentseed/rio-stac!41)</li> </ul>"},{"location":"release-notes/#050-2022-09-05","title":"0.5.0 (2022-09-05)","text":"<ul> <li>add python 3.10 support (developmentseed/rio-stac!37)</li> <li>get dataset datetime from GDAL Raster Data Model breaking</li> <li>add <code>eo</code> extension support (<code>eo:cloud_cover</code>, <code>eo:bands</code>) breaking</li> <li>use <code>auto</code> by default for <code>asset_media_type</code> breaking</li> </ul>"},{"location":"release-notes/#042-2022-06-09","title":"0.4.2 (2022-06-09)","text":"<ul> <li>fix bad <code>nan/inf/-inf</code> nodata test</li> </ul>"},{"location":"release-notes/#041-2022-04-26","title":"0.4.1 (2022-04-26)","text":"<ul> <li>handle <code>nan/inf</code> values to avoid <code>numpy.histogram</code> issue (developmentseed/rio-stac!32)</li> </ul>"},{"location":"release-notes/#040-2022-03-29","title":"0.4.0 (2022-03-29)","text":"<ul> <li>Switch to <code>pyproject.toml</code> to simplify setup.</li> </ul> <p>bug fixes</p> <ul> <li>Split geometry to MultiPolygon for dataset crossing the dataline separation (developmentseed/rio-stac!30)</li> <li>Use correct coordinates order for Polygon (ref developmentseed/geojson-pydantic!49)</li> </ul>"},{"location":"release-notes/#032-2021-10-29","title":"0.3.2 (2021-10-29)","text":"<p>bug fixes * Use the raster_max_size and asset_roles arguments in create_stac_item (author @alexgleith, developmentseed/rio-stac!23) * Fix json serialisation by converting numpy float32 to float (author @alexgleith, developmentseed/rio-stac!24)</p>"},{"location":"release-notes/#031-2021-10-07","title":"0.3.1 (2021-10-07)","text":"<ul> <li>update <code>pystac</code> requirement to allow up to <code>&lt;2.0</code> (author @alexgleith, developmentseed/rio-stac!20)</li> </ul>"},{"location":"release-notes/#030-2021-09-10","title":"0.3.0 (2021-09-10)","text":"<ul> <li>Move <code>raster:bands</code> information in assets (not in properties).</li> <li>update pystac version</li> <li>fix typo for <code>stddev</code> raster information</li> <li>drop support of python 3.6 (pystac 1.0.0 dropped support of python 3.6)</li> </ul>"},{"location":"release-notes/#021-2021-08-24","title":"0.2.1 (2021-08-24)","text":"<ul> <li>use WarpedVRT for data with internal GCPS</li> </ul>"},{"location":"release-notes/#020-2021-07-06","title":"0.2.0 (2021-07-06)","text":"<ul> <li>fix validation issue with Collection and extension for STAC 1.0.0</li> <li>add collection_url option to customize the collection link</li> <li>add <code>raster</code> extension option (developmentseed/rio-stac!12)</li> <li>set <code>proj:epsg</code> value to <code>None</code> when no <code>CRS</code> is found in the dataset.</li> </ul> <p>breaking changes</p> <ul> <li>update pystac version to <code>&gt;=1.0.0rc1</code></li> <li>use full URL for extension</li> <li>add Collection Link when adding a collection</li> <li>add with_proj (--with-proj/--without-proj in the CLI) in <code>create_stac_item</code> to add the extension and proj properties in the stac items (will do the same for the raster extension)</li> </ul>"},{"location":"release-notes/#011-2021-03-19","title":"0.1.1 (2021-03-19)","text":"<ul> <li>fix CLI asset-href default</li> </ul>"},{"location":"release-notes/#010-2021-03-19","title":"0.1.0 (2021-03-19)","text":"<p>Initial release.</p> <ul> <li>Design API</li> <li>add CLI</li> <li>add tests</li> <li>write docs</li> </ul>"},{"location":"api/rio_stac/stac/","title":"Module rio_stac.stac","text":"<p>Create STAC Item from a rasterio dataset.</p>"},{"location":"api/rio_stac/stac/#variables","title":"Variables","text":"<pre><code>EO_EXT_VERSION\n</code></pre> <pre><code>EPSG_4326\n</code></pre> <pre><code>PROJECTION_EXT_VERSION\n</code></pre> <pre><code>RASTER_EXT_VERSION\n</code></pre>"},{"location":"api/rio_stac/stac/#functions","title":"Functions","text":""},{"location":"api/rio_stac/stac/#bbox_to_geom","title":"bbox_to_geom","text":"<pre><code>def bbox_to_geom(\n    bbox: Tuple[float, float, float, float]\n) -&gt; Dict\n</code></pre> <p>Return a geojson geometry from a bbox.</p>"},{"location":"api/rio_stac/stac/#create_stac_item","title":"create_stac_item","text":"<pre><code>def create_stac_item(\n    source: Union[str, rasterio.io.DatasetReader, rasterio.io.DatasetWriter, rasterio.vrt.WarpedVRT, rasterio.io.MemoryFile],\n    input_datetime: Union[datetime.datetime, NoneType] = None,\n    extensions: Union[List[str], NoneType] = None,\n    collection: Union[str, NoneType] = None,\n    collection_url: Union[str, NoneType] = None,\n    properties: Union[Dict, NoneType] = None,\n    id: Union[str, NoneType] = None,\n    assets: Union[Dict[str, pystac.asset.Asset], NoneType] = None,\n    asset_name: str = 'asset',\n    asset_roles: Union[List[str], NoneType] = None,\n    asset_media_type: Union[str, pystac.media_type.MediaType, NoneType] = 'auto',\n    asset_href: Union[str, NoneType] = None,\n    with_proj: bool = False,\n    with_raster: bool = False,\n    with_eo: bool = False,\n    raster_max_size: int = 1024,\n    geom_densify_pts: int = 0,\n    geom_precision: int = 0\n) -&gt; pystac.item.Item\n</code></pre> <p>Create a Stac Item.</p> <p>Parameters:</p> Name Type Description Default source str or opened rasterio dataset input path or rasterio dataset. None input_datetime datetime.datetime datetime associated with the item. None extensions list of str input list of extensions to use in the item. None collection str name of collection the item belongs to. None collection_url str Link to the STAC Collection. None properties dict additional properties to add in the item. None id str id to assign to the item (default to the source basename). None assets dict Assets to set in the item. If set we won't create one from the source. None asset_name str asset name in the Assets object. None asset_roles list of str list of str list of asset's roles. asset_media_type str or pystac.MediaType asset's media type. None asset_href str asset's URI (default to input path). None with_proj bool Add the <code>projection</code> extension and properties (default to False). None with_raster bool Add the <code>raster</code> extension and properties (default to False). None with_eo bool Add the <code>eo</code> extension and properties (default to False). None raster_max_size int Limit array size from which to get the raster statistics. Defaults to 1024. 1024 geom_densify_pts int Number of points to add to each edge to account for nonlinear edges transformation (Note: GDAL uses 21). None geom_precision int If &gt;= 0, geometry coordinates will be rounded to this number of decimal. None <p>Returns:</p> Type Description pystac.Item valid STAC Item."},{"location":"api/rio_stac/stac/#get_dataset_geom","title":"get_dataset_geom","text":"<pre><code>def get_dataset_geom(\n    src_dst: Union[rasterio.io.DatasetReader, rasterio.io.DatasetWriter, rasterio.vrt.WarpedVRT, rasterio.io.MemoryFile],\n    densify_pts: int = 0,\n    precision: int = 0\n) -&gt; Dict\n</code></pre> <p>Get Raster Footprint.</p>"},{"location":"api/rio_stac/stac/#get_eobands_info","title":"get_eobands_info","text":"<pre><code>def get_eobands_info(\n    src_dst: Union[rasterio.io.DatasetReader, rasterio.io.DatasetWriter, rasterio.vrt.WarpedVRT, rasterio.io.MemoryFile]\n) -&gt; List\n</code></pre> <p>Get eo:bands metadata.</p> <p>see: stac-extensions/eo#item-properties-or-asset-fields</p>"},{"location":"api/rio_stac/stac/#get_media_type","title":"get_media_type","text":"<pre><code>def get_media_type(\n    src_dst: Union[rasterio.io.DatasetReader, rasterio.io.DatasetWriter, rasterio.vrt.WarpedVRT, rasterio.io.MemoryFile]\n) -&gt; Union[pystac.media_type.MediaType, NoneType]\n</code></pre> <p>Find MediaType for a raster dataset.</p>"},{"location":"api/rio_stac/stac/#get_projection_info","title":"get_projection_info","text":"<pre><code>def get_projection_info(\n    src_dst: Union[rasterio.io.DatasetReader, rasterio.io.DatasetWriter, rasterio.vrt.WarpedVRT, rasterio.io.MemoryFile]\n) -&gt; Dict\n</code></pre> <p>Get projection metadata.</p> <p>see: github.com/stac-extensions/projection/#item-properties-or-asset-fields</p>"},{"location":"api/rio_stac/stac/#get_raster_info","title":"get_raster_info","text":"<pre><code>def get_raster_info(\n    src_dst: Union[rasterio.io.DatasetReader, rasterio.io.DatasetWriter, rasterio.vrt.WarpedVRT, rasterio.io.MemoryFile],\n    max_size: int = 1024\n) -&gt; List[Dict]\n</code></pre> <p>Get raster metadata.</p> <p>see: stac-extensions/raster#raster-band-object</p>"}]}